@use 'function' as *;
@use '../common/var' as *;
// forward mixins
@forward 'config';
@forward 'function';
@forward 'var';
@use 'config' as *;

// Scrollbar
@mixin scroll-bar($color: #c0c4cc, $width: 6px, $track-bgColor: transparent, $borderSize: 0px, $hover-color: $color, $isRoot: false) {
  $selector: '&::-webkit-scrollbar';
  @if $isRoot {
    $selector: '::-webkit-scrollbar'
  }

  #{$selector} {
    z-index: 11;
    width: $width;

    &:horizontal {
      height: $width;
    }

    // scroll-bar
    &-thumb {
      border-radius: 5px;
      width: $width;
      background: $color;
      border: $borderSize solid $track-bgColor;
    }

    // scroll-bar hover
    &-thumb:hover {
      background: $hover-color;
    }

    &-corner {
      background: $track-bgColor;
    }

    &-track {
      background: $track-bgColor;

      &-piece {
        background: $track-bgColor;
        width: $width;
      }
    }
  }
}

// set-component-css-var-bak
// @include b(tab) {} -> vft-tab {}
@mixin b($block) {
  $B: $namespace + '-' + $block !global;

  .#{$B} {
    @content;
  }
}

/**
  @include e(header) {} ==> .vft-tabs__header {}
  @include @include e((nav-next, nav-prev)) {} ==> ,vft-tabs__nav-prev .vft-tabs__nav-next {}
 */
@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + $modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin configurable-m($modifier, $E-flag: false) {
  $selector: &;
  $interpolation: '';

  @if $E-flag {
    $interpolation: $element-separator + $E-flag;
  }

  @at-root {
    #{$selector} {
      .#{$B + $interpolation + $modifier-separator + $modifier} {
        @content;
      }
    }
  }
}

@mixin spec-selector($specSelector: '', $element: $E, $modifier: false, $block: $B) {
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }

  @at-root {
    #{&}#{$specSelector}.#{$block + $element-separator + $element + $modifierCombo} {
      @content;
    }
  }
}

@mixin meb($modifier: false, $element: $E, $block: $B) {
  $selector: &;
  $modifierCombo: '';

  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }

  @at-root {
    #{$selector} {
      .#{$block + $element-separator + $element + $modifierCombo} {
        @content;
      }
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin extend-rule($name) {
  @extend #{'%shared-' + $name} !optional;
}

@mixin share-rule($name) {
  $rule-name: '%shared-' + $name;

  @at-root #{$rule-name} {
    @content;
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content;
  }
}

@mixin picker-popper($background, $border, $box-shadow) {
  &.#{$namespace}-popper {
    background: $background;
    border: $border;
    box-shadow: $box-shadow;

    .#{$namespace}-popper__arrow {
      &::before {
        border: $border;
      }
    }

    @each $placement, $adjacency in ('top': 'left', 'bottom': 'right', 'left': 'bottom', 'right': 'top') {
      &[data-popper-placement^='#{$placement}'] {
        .#{$namespace}-popper__arrow::before {
          border-#{$placement}-color: transparent;
          border-#{$adjacency}-color: transparent;
        }
      }
    }
  }
}

// dark
@mixin dark($block) {
  html.dark {
    @include b($block) {
      @content;
    }
  }
}

@mixin line-clamp($number, $inline: false) {
  overflow: hidden;
  @if $inline {
    // noinspection CssInvalidPropertyValue
    display: -webkit-inline-box;
  } @else {
    display: -webkit-box;
  }
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $number;
  line-clamp: $number;
}

@mixin flex-center($inline: false) {
  @if $inline {
    display: inline-flex;
  } @else {
    display: flex;
  }
  align-items: center;
  justify-content: center;
}

@mixin overlay($x: true, $y: true) {
  @if ($x and $y) {
    overflow: auto;
    // noinspection CssInvalidPropertyValue
    overflow: overlay;
  } @else if ($x) {
    overflow-x: auto;
    // noinspection CssInvalidPropertyValue
    overflow-x: overlay;
  } @else {
    overflow-y: auto;
    // noinspection CssInvalidPropertyValue
    overflow-y: overlay;
  }
}

@mixin hover-text-cursor($underline: false, $color: $primary-color) {
  cursor: pointer;
  &:hover {
    color: $color;
    @if $underline {
      text-decoration: underline;
    }
  }
}
